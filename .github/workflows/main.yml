name: YG Playwright CI 

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    env:
      API_URL: ${{ secrets.API_URL }}
      LOGIN_URL: ${{ secrets.LOGIN_URL }}
      REGISTER_URL: ${{ secrets.REGISTER_URL }}
      GOOGLE_CALENDAR: ${{ secrets.GOOGLE_CALENDAR }}
      MICROSOFT_CALENDAR: ${{ secrets.MICROSOFT_CALENDAR }}
      GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
      GOOGLE_PASSWORD: ${{ secrets.GOOGLE_PASSWORD }}
      EMAIL_LOGIN: ${{ secrets.EMAIL_LOGIN }}
      PASSWORD: ${{ secrets.PASSWORD }}

    strategy:
      fail-fast: false
      matrix:
        suite: [behind-login, public]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests (${{ matrix.suite }})
        run: npx playwright test tests/${{ matrix.suite }} --reporter=json,html --output=results
        continue-on-error: true

      - name: Parse test summary
        id: summary
        run: |
          results_file="results/results.json"
          if [ ! -f "$results_file" ]; then
            echo "No results.json found"
            exit 0
          fi

          passed=$(jq '[.. | .results? // empty | .[] | select(.status=="passed")] | length' $results_file)
          failed=$(jq '[.. | .results? // empty | .[] | select(.status=="failed")] | length' $results_file)
          skipped=$(jq '[.. | .results? // empty | .[] | select(.status=="skipped")] | length' $results_file)

          echo "PASSED=$passed" >> $GITHUB_ENV
          echo "FAILED=$failed" >> $GITHUB_ENV
          echo "SKIPPED=$skipped" >> $GITHUB_ENV

          # save per-suite summary into a file for notify job
          echo "${{ matrix.suite }}: ✅ $passed | ❌ $failed | ⚠️ $skipped" >> suite-summary.txt

      - name: Upload suite summary
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.suite }}
          path: suite-summary.txt

      - name: Zip Playwright HTML report
        run: |
          if [ -d "playwright-report" ]; then
            zip -r playwright-report-${{ matrix.suite }}.zip playwright-report
          else
            echo "No report to zip."
          fi

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report-${{ matrix.suite }}
          path: playwright-report/
          retention-days: 30

      - name: Upload trace files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-trace-${{ matrix.suite }}
          path: test-results/
          retention-days: 30

  notify:
    name: Send Results via Email
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all summaries
        uses: actions/download-artifact@v4
        with:
          path: summaries

      - name: Combine summaries
        run: |
          echo "## ✅ Playwright Test Results" > full-summary.txt
          cat summaries/**/suite-summary.txt >> full-summary.txt
          echo "" >> full-summary.txt

      - name: Download all HTML reports
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Re-zip downloaded reports
        run: |
          cd reports
          for dir in */ ; do
            zip -r "${dir%/}.zip" "$dir"
          done

      - name: Send summary email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GOOGLE_EMAIL }}
          password: ${{ secrets.GOOGLE_PASSWORD }}
          subject: "Test Results for ${{ github.repository }}"
          to: markchristiandurana75@gmail.com
          from: Playwright CI <mcdurana@jlabs.team>
          body: |
            Playwright test run completed for repository **${{ github.event.repository.name }}**.

            ${{ steps.combine.outputs }}

            📎 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          attachments: "reports/*.zip"
