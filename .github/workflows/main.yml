name: YG Playwright CI 

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
        group: ${{ github.workflow }}-${{ github.ref }}
        cancel-in-progress: true


jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    env:
      API_URL: ${{ secrets.API_URL }}
      LOGIN_URL: ${{ secrets.LOGIN_URL }}
      REGISTER_URL: ${{ secrets.REGISTER_URL }}
      GOOGLE_CALENDAR: ${{ secrets.GOOGLE_CALENDAR }}
      MICROSOFT_CALENDAR: ${{ secrets.MICROSOFT_CALENDAR }}
      GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
      GOOGLE_PASSWORD: ${{ secrets.GOOGLE_PASSWORD }}
      EMAIL_LOGIN: ${{ secrets.EMAIL_LOGIN }}
      PASSWORD: ${{ secrets.PASSWORD }}

    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests (sharded)
        run: npx playwright test --reporter=json,html --shard=${{ matrix.shard }}/3
        continue-on-error: true

      - name: Zip Playwright HTML report (if exists)
        run: |
          if [ -d "playwright-report" ]; then
            zip -r playwright-report.zip playwright-report
          else
            echo "No report to zip."
          fi

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 30

      - name: Upload trace files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-trace-${{ matrix.shard }}
          path: test-results/
          retention-days: 30

      - name: Check workspace contents
        run: ls -la

      # üîπ Parse test summary + test titles
      - name: Parse test summary
        id: summary
        run: |
          passed=$(jq '[.. | .results? // empty | .[] | select(.status=="passed")] | length' results.json)
          failed=$(jq '[.. | .results? // empty | .[] | select(.status=="failed")] | length' results.json)
          skipped=$(jq '[.. | .results? // empty | .[] | select(.status=="skipped")] | length' results.json)

           # Passed test titles
          passed_tests=$(jq -r '
            [.. | .specs? // empty | .[] 
              | select(any(.tests[].results[]?.status; . == "passed")) 
              | .title] 
            | .[]
          ' results.json)

          # Failed test titles
          failed_tests=$(jq -r '
            [.. | .specs? // empty | .[] 
              | select(any(.tests[].results[]?.status; . == "failed")) 
              | .title] 
            | .[]
          ' results.json)

          # Skipped test titles
          skipped_tests=$(jq -r '
            [.. | .specs? // empty | .[] 
              | select(any(.tests[].results[]?.status; . == "skipped")) 
              | .title] 
            | .[]
          ' results.json)

          echo "‚úÖ Passed: $passed"
          echo "‚ùå Failed: $failed"
          echo "‚ö†Ô∏è Skipped: $skipped"

          # Handle "None" cases
          if [ -z "$passed_tests" ]; then passed_tests="None"; fi
          if [ -z "$failed_tests" ]; then failed_tests="None"; fi
          if [ -z "$skipped_tests" ]; then skipped_tests="None"; fi

          # Export to env for email step
                {
          echo "PASSED=$passed"
          echo "FAILED=$failed"
          echo "SKIPPED=$skipped"

          echo "PASSED_TESTS<<EOF"
          echo "$passed_tests"
          echo "EOF"

          echo "FAILED_TESTS<<EOF"
          echo "$failed_tests"
          echo "EOF"

          echo "SKIPPED_TESTS<<EOF"
          echo "$skipped_tests"
          echo "EOF"
          } >> $GITHUB_ENV


      - name: Add summary to GitHub UI
        if: always()
        run: |
          echo "## ‚úÖ Playwright Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: ${{ env.PASSED }}" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: ${{ env.FAILED }}" >> $GITHUB_STEP_SUMMARY
          echo "- Skipped: ${{ env.SKIPPED }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail job if tests failed
        if: ${{ env.FAILED != '0' }}
        run: exit 1

  notify:
    name: Send Results via Email
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download HTML report
        uses: actions/download-artifact@v4
        with:
          name: playwright-html-report-1
          path: playwright-report
      - name: Zip report before emailing
        run: zip -r playwright-report.zip playwright-report
      - name: Send summary email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GOOGLE_EMAIL }}
          password: ${{ secrets.GOOGLE_PASSWORD }}
          subject: "Test Results for ${{ github.repository }}"
          to: markchristiandurana75@gmail.com
          from: Playwright CI <mcdurana@jlabs.team>
          body: |
            Playwright test run completed for repository **${{ github.event.repository.name }}**.

            ## Test Results:
            ------------------------------------------
            ‚úÖ Passed: ${{ env.PASSED }}
            ‚ùå Failed: ${{ env.FAILED }}
            ‚ö†Ô∏è Skipped: ${{ env.SKIPPED }}

            ‚úÖ Passed Tests:
            ${{ env.PASSED_TESTS }}

            ‚ùå Failed Tests:
            ${{ env.FAILED_TESTS }}

            ‚ö†Ô∏è Skipped Tests:
            ${{ env.SKIPPED_TESTS }}
            ------------------------------------------

            üí° To view the Playwright HTML report:
            1. Download the attached `playwright-report.zip`.
            2. Extract it and open `index.html` in a browser.

            üß™ To inspect Playwright traces:
            1. Download trace artifacts from:
               ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            2. Open https://trace.playwright.dev and drag & drop trace zip files.

            üìé Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          attachments: "playwright-report.zip"